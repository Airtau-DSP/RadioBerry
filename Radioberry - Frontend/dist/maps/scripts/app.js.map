{"version":3,"sources":["scripts/app.js"],"names":["routesConfig","$stateProvider","$urlRouterProvider","$locationProvider","html5Mode","hashPrefix","otherwise","state","url","component","templateUrl","controller","$inject","angular","module","bindings","radio","$scope","RadiostateService","self","this","value","volume","setVolume","console","log","updateRadioState","$window","$interval","NotifyingService","WebSocketService","ws","canvasElement","document","getElementById","subscribe","showSpectrum","draw","canvasCtx","fillStyle","fillRect","WIDTH","HEIGHT","strokeStyle","lineWidth","beginPath","p","i","moveTo","lineTo","font","fillText","stroke","sliceWidth","bufferLength","x","width","bandWidth","changed","freqMarkers","j","end","k","y","dataArray","spectrum","strFreq","replace","length","sdrspectrumcenter","Float32Array","data","height","getContext","clearRect","mode","$log","selectedMode","setMode","code","MouseScroll","event","rolled","wheelDelta","detail","frequency","parseInt","frequencystep","$apply","setFreq","freq","addEventListener","freqstep","preventDefault","which","step","String","Math","abs","high","setBandWidth","low","selectBand","band","att","setAtt","agcmode","setAGCMode","agcgain","selectAGCGain","invert","hello","factory","$rootScope","$websocket","dataStream","location","host","spectrumData","onMessage","message","JSON","parse","$emit","scope","callback","handler","$on","service","$http","radioState","urlBase","undefined","localStorage","getItem","parseFloat","getRadioState","post","setItem","stringify","notify","modes","ssbmode","run","$templateCache","put","config"],"mappings":"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","file":"../../scripts/app.js","sourcesContent":["angular\r\n  .module('app', ['ui.router', 'ngWebSocket']);\r\n\nangular\r\n    .module('app')\r\n    .component('volume', {\r\n        templateUrl: 'app/widgets/volume_view.html',\r\n        bindings: {\r\n            radio: '='\r\n        },\r\n        controller: function ($scope, RadiostateService) {\r\n            var self = this;\r\n\r\n            $scope.value = self.radio.volume;\r\n\r\n            self.setVolume = function (value) {\r\n                console.log('Volume ' + value + ' selected');\r\n\r\n                self.radio.volume = value;\r\n                RadiostateService.updateRadioState(self.radio);\r\n            };\r\n\r\n        }\r\n    });\nangular\r\n    .module('app')\r\n    .component('spectrum', {\r\n        templateUrl: 'app/widgets/spectrum_view.html',\r\n        bindings: {\r\n            radio: '='\r\n        },\r\n        controller: function ($window, $scope, $interval, NotifyingService, WebSocketService) {\r\n            var self = this;\r\n\r\n            self.ws = WebSocketService;\r\n\r\n            this.canvasElement = $window.document.getElementById('visualizer');\r\n\r\n            WebSocketService.subscribe($scope, function newSpectrumData() {\r\n                showSpectrum();\r\n            });\r\n\r\n            var showSpectrum = function () {\r\n                \r\n                var dataArray = new Float32Array(1280);\r\n                dataArray = self.ws.data.spectrum;\r\n                \r\n                var bandWidth = 0;\r\n\r\n                WIDTH = 900;\r\n                HEIGHT = 300;\r\n                self.canvasElement.width = WIDTH;\r\n\t            self.canvasElement.height = HEIGHT;\r\n\r\n                var bufferLength = 1280;\r\n                var canvasCtx = self.canvasElement.getContext(\"2d\");\r\n                canvasCtx.clearRect(0, 0, WIDTH, HEIGHT);\r\n\r\n                function draw() {\r\n                    canvasCtx.fillStyle = \"#808080\"; \r\n                    canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\r\n\r\n                    // horizontal raster\r\n                    canvasCtx.strokeStyle = \"#959492\";\r\n                    canvasCtx.lineWidth = 0.4;\r\n                    canvasCtx.beginPath();\r\n                    p = 0;\r\n                    for (i = 0; i < (HEIGHT + 10); i += 20) {\r\n                        canvasCtx.moveTo(10, i);\r\n                        canvasCtx.lineTo(WIDTH, i);\r\n                        canvasCtx.fillStyle = \"#000000\";\r\n                        canvasCtx.font = \"bold 13px sans-serif\";\r\n                        canvasCtx.fillText(\"-\" + p, 0, i);\r\n                        p += 10;\r\n                    }\r\n                    ;\r\n                    canvasCtx.stroke();\r\n\r\n                    // vertical raster\r\n                    canvasCtx.beginPath();\r\n                    for (i = 30; i < (WIDTH + 10); i += 20) {\r\n                        canvasCtx.moveTo(i, 0);\r\n                        canvasCtx.lineTo(i, HEIGHT);\r\n                    }\r\n                    ;\r\n                    canvasCtx.stroke();\r\n\r\n                    //actual spectrum plot\r\n                    canvasCtx.lineWidth = 1;\r\n                    canvasCtx.strokeStyle = 'rgb(0, 0, 0)';\r\n                    canvasCtx.beginPath();\r\n                    var sliceWidth = (WIDTH - 30) * 1.0 / bufferLength;\r\n                    var x = 30;\r\n\r\n                    var left = 600; //$('#bandwith').pixels('left');\r\n                    var width = 600; //$('#bandwith').pixels('width');\r\n\r\n                    if (bandWidth != width) {\r\n                        bandWidth = width;\r\n                        changed = true;\r\n                    }\r\n\r\n                    var freqMarkers = [];\r\n                    var j = 0;\r\n                    var start = true;\r\n                    var end = false;\r\n                    canvasCtx.font = \"bold 14px sans-serif\";\r\n                    canvasCtx.fillStyle = \"#959492\";\r\n                    var k = 1;\r\n                    for (var i = 0; i < bufferLength; i++) {\r\n                        k = k * -1;\r\n                        var y = dataArray.spectrum[i] * -1 * 2; //240.0 + ( (Math.random() * 4) * k) ; //\r\n                        if (i === 0) {\r\n                            canvasCtx.moveTo(x, y);\r\n                        } else {\r\n                            // if (x >= left && x < (left + width)) {\r\n                            //     if (start) { canvasCtx.stroke(); canvasCtx.beginPath(); start = false; end = true; }\r\n                            //     canvasCtx.strokeStyle = '#ff0000';\r\n                            //     canvasCtx.lineWidth = 1;\r\n                            // }\r\n                            // else {\r\n                                if (end) { canvasCtx.stroke(); canvasCtx.beginPath(); end = false };\r\n                                canvasCtx.strokeStyle = 'rgb(0, 0, 0)';\r\n                                canvasCtx.lineWidth = 1;\r\n                            // }\r\n                            canvasCtx.lineTo(x, y);\r\n                        }\r\n\r\n                        //sdrspectrumfrequency\r\n                        x += sliceWidth;\r\n\r\n                        if (i % (bufferLength / 8) == 0) {\r\n                            canvasCtx.fillStyle = \"#000000\";\r\n                            var strFreq = \"3.630\";//numeral(((radioControl.frequency - 24000) + (6000 * j)) / 1000).format('0,0');\r\n                            strFreq = strFreq.replace(/,/g, \".\");\r\n                            canvasCtx.fillText(strFreq, x, 15);\r\n                            freqMarkers[freqMarkers.length] = x;\r\n                            //console.log(strFreq + \" pos: \" + x);\r\n\r\n                            if ((6000 * j) == 24000) {\r\n                                sdrspectrumcenter = x;\r\n                            }\r\n\r\n                            j++;\r\n                        }\r\n                    }\r\n                    canvasCtx.fillStyle = \"#000000\";\r\n                    var strFreq = \"3.630.000\";//numeral((radioControl.frequency + 24000) / 1000).format('0,0');\r\n                    strFreq = strFreq.replace(/,/g, \".\");\r\n                    canvasCtx.fillText(strFreq, WIDTH - 30, 15);\r\n                    freqMarkers[freqMarkers.length] = WIDTH - 30;\r\n\r\n                    canvasCtx.stroke();\r\n\r\n                    canvasCtx.beginPath();\r\n                    canvasCtx.strokeStyle = \"#959492\";\r\n                    canvasCtx.lineWidth = 2.0;\r\n                    for (i = 0; i < freqMarkers.length; i++) {\r\n\r\n                        canvasCtx.moveTo(freqMarkers[i], 0);\r\n                        canvasCtx.lineTo(freqMarkers[i], HEIGHT);\r\n                    }\r\n                    canvasCtx.stroke();\r\n                };\r\n                draw();\r\n            };\r\n            //using interval\r\n            //$interval(createData, 50);\r\n        }\r\n    });\r\n\t\n\nangular\r\n    .module('app')\r\n    .component('modeselector', {\r\n        templateUrl: 'app/widgets/mode-selector_view.html',\r\n        bindings: {\r\n            radio: '=',\r\n            mode: '='\r\n        },\r\n        controller: function ($window, $scope, $log, RadiostateService) {\r\n            var self = this;\r\n            \r\n            self.selectedMode = self.mode[self.radio.mode];\r\n        \r\n            self.setMode = function () {\r\n                 self.radio.mode = self.selectedMode.code;\r\n                 RadiostateService.updateRadioState(self.radio);\r\n             };\r\n\r\n        }\r\n    });\nangular\r\n    .module('app')\r\n    .component('frequencycontrol', {\r\n        templateUrl: 'app/widgets/frequency-control_view.html',\r\n        bindings: {\r\n            radio: '='\r\n        },\r\n        controller: function ($window, $scope, $log, RadiostateService) {\r\n            var self = this;\r\n            \r\n            console.log(self.radio);\r\n        \r\n            self.setFreq = function () {\r\n                RadiostateService.updateRadioState(self.radio);\r\n            };\r\n\r\n            var freq = $window.document.getElementById(\"freq\");\r\n            if (freq.addEventListener) {\r\n                // Internet Explorer, Opera, Google Chrome and Safari\r\n                freq.addEventListener(\"mousewheel\", MouseScroll, false);\r\n                // Firefox\r\n                freq.addEventListener(\"DOMMouseScroll\", MouseScroll, false);\r\n            }\r\n\r\n            function MouseScroll(event) {\r\n                var rolled = 0;\r\n                if ('wheelDelta' in event) {\r\n                    rolled = event.wheelDelta;\r\n                }\r\n                else {  // Firefox\r\n                    // The measurement units of the detail and wheelDelta properties are different.\r\n                    rolled = -40 * event.detail;\r\n                    rolled = event.detail;\r\n                }\r\n                if (rolled > 0) \r\n                    { self.radio.frequency = self.radio.frequency + parseInt(self.radio.frequencystep); } \r\n                else \r\n                    { self.radio.frequency = self.radio.frequency - parseInt(self.radio.frequencystep); }\r\n\r\n                RadiostateService.updateRadioState(self.radio);\r\n                $scope.$apply();\r\n            }\r\n\r\n\r\n            //disable context menu using secondary mouse event.\r\n            freqstep.addEventListener('contextmenu', function (event) {\r\n                event.preventDefault();\r\n                return false;\r\n            });\r\n\r\n            // handling the freq step based on the left and right mouse clicks.\r\n            freqstep.addEventListener(\"mousedown\", function (event) {\r\n                switch (event.which) {\r\n                    case 1:\r\n                        step = parseInt(self.radio.frequencystep);\r\n                        if (step < 10000000) { step = step * 10; }\r\n                        self.radio.frequencystep = String(step);\r\n                        break;\r\n                    case 2:\r\n                        break;\r\n                    case 3:\r\n                        step = parseInt(self.radio.frequencystep);\r\n                        if (step > 1) { step = step / 10; }\r\n                        self.radio.frequencystep = String(step);\r\n                        break;\r\n                    default:\r\n                        console.log('Mouse what are you doing...');\r\n                }\r\n                RadiostateService.updateRadioState(self.radio);\r\n                $scope.$apply();\r\n            });\r\n        }\r\n    });\nangular\r\n    .module('app')\r\n    .component('bandwithselector', {\r\n        templateUrl: 'app/widgets/bandwidth-selector_view.html',\r\n        bindings: {\r\n            radio: '='\r\n        },\r\n        controller: function ($scope, RadiostateService) {\r\n            var self = this;\r\n\r\n            $scope.value = Math.abs(self.radio.high);\r\n\r\n            self.setBandWidth = function (value) {\r\n                console.log('bandwith ' + value + ' selected');\r\n                //LSB = 0\r\n                if (self.radio.mode == 0) {\r\n                    self.radio.low = -150;\r\n                    self.radio.high = value * -1;\r\n                }   \r\n                if (self.radio.mode == 1) {\r\n                    self.radio.low = 150;\r\n                    self.radio.high = value;\r\n                }\r\n                if (self.radio.mode == 2 || self.radio.mode == 6) {\r\n                    self.radio.low = value * -1\r\n                    self.radio.high = value;\r\n                }\r\n\r\n                RadiostateService.updateRadioState(self.radio);\r\n            };\r\n        }\r\n    });\nangular\r\n    .module('app')\r\n    .component('bandselector', {\r\n        templateUrl: 'app/widgets/band-selector_view.html',\r\n        bindings: {\r\n            radio: '='\r\n        },\r\n        controller: function (RadiostateService) {\r\n            var self = this;\r\n\r\n            self.selectBand = function (band) {\r\n                console.log('band ' + band + ' selected');\r\n                if (band == 80)\r\n                    self.radio.frequency = 3630000;\r\n                RadiostateService.updateRadioState(self.radio);\r\n            };\r\n\r\n        }\r\n    });\nangular\r\n    .module('app')\r\n    .component('attselector', {\r\n        templateUrl: 'app/widgets/att-selector_view.html',\r\n        bindings: {\r\n            radio: '='\r\n        },\r\n        controller: function ($scope, RadiostateService) {\r\n            var self = this;\r\n\r\n            $scope.value = self.radio.att;\r\n\r\n            self.setAtt = function (value) {\r\n                console.log('att ' + value + ' selected');\r\n\r\n                self.radio.att = value;\r\n                RadiostateService.updateRadioState(self.radio);\r\n            };\r\n\r\n        }\r\n    });\nangular\r\n    .module('app')\r\n    .component('agcselector', {\r\n        templateUrl: 'app/widgets/agc-selector_view.html',\r\n        bindings: {\r\n            radio: '=',\r\n            agcmode: '='\r\n        },\r\n        controller: function ($window, $scope, $log, RadiostateService) {\r\n            var self = this;\r\n            \r\n            self.selectedMode = self.agcmode[self.radio.agcmode];\r\n        \r\n            self.setAGCMode = function () {\r\n                 self.radio.agcmode = self.selectedMode.code;\r\n                 RadiostateService.updateRadioState(self.radio);\r\n             };\r\n\r\n        }\r\n    });\nangular\r\n    .module('app')\r\n    .component('agcgainselector', {\r\n        templateUrl: 'app/widgets/agc-gain-selector_view.html',\r\n        bindings: {\r\n            radio: '='\r\n        },\r\n        controller: function ($scope, RadiostateService) {\r\n            var self = this;\r\n\r\n            $scope.value = 120 - self.radio.agcgain;\r\n\r\n            self.selectAGCGain = function (agcgain) {\r\n                invert =  120 - agcgain;\r\n                console.log('agc gain  ' + invert + ' selected');\r\n                self.radio.agcgain = invert;\r\n                RadiostateService.updateRadioState(self.radio);\r\n            };\r\n\r\n        }\r\n    });\nangular\r\n  .module('app')\r\n  .component('ssb', {\r\n    templateUrl: 'app/ssb/ssb.html',\r\n    controller: function () {\r\n      this.hello = 'Hello SSB World!';\r\n    }\r\n  });\r\n\nangular\r\n    .module('app')\r\n    .factory('WebSocketService', ['$window', '$rootScope', '$websocket', function ($window, $rootScope, $websocket) {\r\n\r\n        // Open a WebSocket connection\r\n        //using for local test... \r\n        //var dataStream = $websocket('ws://169.254.214.88:8000/ws');\r\n        var dataStream = $websocket('ws://' + $window.location.host + '/ws');\r\n    \r\n        $rootScope.spectrumData={};\r\n\r\n        dataStream.onMessage(function (message) {\r\n            $rootScope.spectrumData.spectrum = JSON.parse(message.data);\r\n            $rootScope.$emit('spectrum-event');\r\n        });\r\n\r\n        return {\r\n            data: $rootScope.spectrumData,\r\n\r\n            subscribe: function (scope, callback) {\r\n                var handler = $rootScope.$on('spectrum-event', callback);\r\n                scope.$on('$destroy', handler);\r\n            }\r\n        };\r\n\r\n    }]);\nangular\r\n    .module('app')\r\n    .service('RadiostateService', ['$http', function ($http) {\r\n\r\n        var urlBase = '/radioberry/control.do';\r\n\r\n        var radioState;\r\n\r\n        if (localStorage.getItem(\"radiostate\") == undefined) {\r\n            radioState = { \"frequency\": parseInt(1008000), \"frequencystep\": String(100), \"mode\": parseInt(6), \"agcmode\": parseInt(0), \"low\": parseInt(-4000), \"high\": parseInt(4000), \"agcgain\": parseFloat(85), \"att\": parseInt(10) };\r\n        } else {\r\n            radioState = JSON.parse(localStorage.getItem(\"radiostate\"));\r\n        }\r\n\r\n        this.getRadioState = function () {\r\n            return radioState;\r\n        };\r\n\r\n        this.updateRadioState = function (radio) {\r\n            $http.post(urlBase, radio);\r\n            localStorage.setItem(\"radiostate\", JSON.stringify(radio));\r\n            return radio;\r\n        };\r\n\r\n    }]);\nangular\r\n    .module('app')\r\n    .factory('NotifyingService', ['$rootScope' ,function ($rootScope) {\r\n\r\n        return {\r\n            subscribe: function (scope, callback) {\r\n                var handler = $rootScope.$on('notifying-service-event', callback);\r\n                scope.$on('$destroy', handler);\r\n            },\r\n\r\n            notify: function () {\r\n                $rootScope.$emit('notifying-service-event');\r\n            },\r\n\r\n        };\r\n\r\n    }]);\nangular\r\n  .module('app')\r\n  .component('cw', {\r\n    templateUrl: 'app/cw/cw.html',\r\n    controller: function () {\r\n      this.hello = 'Hello CW World!';\r\n    }\r\n  });\r\n\nangular\r\n    .module('app')\r\n    .controller('RadioControl', ['$scope', 'RadiostateService',   function($scope, RadiostateService){\r\n\r\n       $scope.radioState = RadiostateService.getRadioState();\r\n\r\n       $scope.modes = [\r\n            {\"mode\": \"LSB\", \"code\": 0},\r\n            {\"mode\": \"USB\", \"code\": 1},\r\n            {\"mode\": \"DSB\", \"code\": 2},\r\n            {\"mode\": \"CWL\", \"code\": 3},\r\n            {\"mode\": \"CWU\", \"code\": 4},\r\n            {\"mode\": \"FM\", \"code\": 5},\r\n            {\"mode\": \"AM\", \"code\": 6},\r\n            {\"mode\": \"DIGU\", \"code\": 7},\r\n            {\"mode\": \"SPEC\", \"code\": 8},\r\n            {\"mode\": \"DIGL\", \"code\": 9},\r\n            {\"mode\": \"SAM\", \"code\": 10},\r\n            {\"mode\": \"DRM\", \"code\": 11}\r\n       ];\r\n\r\n       $scope.ssbmode = [\r\n            {\"mode\": \"LSB\", \"code\": 0},\r\n            {\"mode\": \"USB\", \"code\": 1}\r\n       ];\r\n\r\n       $scope.agcmode = [\r\n           {\"mode\": \"OFF\", \"code\": 0},\r\n           {\"mode\": \"LONG\", \"code\": 1},\r\n           {\"mode\": \"SLOW\", \"code\": 2},\r\n           {\"mode\": \"MED\", \"code\": 3},\r\n           {\"mode\": \"FAST\", \"code\": 4}\r\n           //{\"mode\": \"CUSTOM\", \"code\": 5},\r\n       ];\r\n\r\n       $scope.hello = \"hello-from-controller-radio-state\";\r\n\r\n    }]);\nangular\r\n  .module('app')\r\n  .component('am', {\r\n    templateUrl: 'app/am/am.html',\r\n    controller: function () {\r\n      this.hello = 'Hello AM World!';\r\n    }\r\n  });\r\n\nangular\r\n  .module('app')\r\n  .component('home', {\r\n    templateUrl: 'app/home.html',\r\n    controller: function () {\r\n      this.hello = 'Hello World!';\r\n    }\r\n  });\r\n\nangular.module(\"app\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/home.html\",\"<header>\\r\\n\t<h1>The Radioberry, a nice small standalone amateur HF transceiver</h1>\\r\\n\t<h2>The radioberry is a radio card connected to a raspberrypi 2 or 3</h2>\\r\\n\\r\\n  <img ng-src=\\\"radioberry/app/images/radioberry.jpg\\\" width=\\\"200px\\\" height=\\\"155px\\\"> \\r\\n\\r\\n  <h3> The backend uses a server. </h3>\\r\\n\\r\\n\t<h3> This makes it possible to create a specific frontend. The frontend presented here uses a browser using some \\'modern\\' frontend techniques.</h3>\\r\\n\\r\\n\\r\\n</header>\\r\\n\\r\\n<body>\\r\\n\\r\\n<br>\\r\\n\t<h4>The available widgets can be found on the demo widgets page; these widgets are actually controlling the radio.</h4>\\r\\n\t<a href=\\\"demo\\\">Demo radio control widgets</a>\\r\\n\t \\r\\n  <h4>For the following modes there is already a link; using the widgets and styling will give your own radio experience! : </h4>\\r\\n\t<li><a href=\\\"ssb\\\">SSB</a></li>\\r\\n\t<li><a href=\\\"am\\\">AM</a></li>\\r\\n\t<li><a href=\\\"cw\\\">CW</a></li>\\r\\n\t<li> hope many to come also for digital modes...</li>\\r\\n</body>\\r\\n<footer>\\r\\n\t<h4>Provided by Johan PA3GSB</h4>\\r\\n</footer>\");\n$templateCache.put(\"app/am/am.html\",\"<a href=\\\"home\\\">Home</a>\\r\\n\\r\\n<h1>{{ $ctrl.hello }}</h1>\\r\\n\\r\\n<p> happy programming to implement a am mode </p>\\r\\n\");\n$templateCache.put(\"app/cw/cw.html\",\"<a href=\\\"home\\\">Home</a>\\r\\n<h1>{{ $ctrl.hello }}</h1>\\r\\n\\r\\n<p> happy programming to implement a cw mode </p>\\r\\n\");\n$templateCache.put(\"app/demo/demo.html\",\"<a href=\\\"home\\\">Home</a>\\r\\n\\r\\n\t<h1> Radio Widgets / Control Demo Page</h1>\\r\\n\\r\\n<p> Presenting the radio controls; these controls can be used to make your own fancy radio userinterface!! </p>\\r\\n<p> The idea is that the demo page actually controls the radioberry radio!</p>\\r\\n\\r\\n<p> Radio control properties, state of the radio {{radioState}}</p>\\r\\n\\r\\n\\r\\n\t\t<bandselector radio=\\\"radioState\\\"></bandselector>\\r\\n\t\\r\\n\t\t<attselector radio=\\\"radioState\\\"> </attselector>\\r\\n\\r\\n\t\t<frequencycontrol radio=\\\"radioState\\\"></frequencycontrol>\\r\\n\\r\\n\t\t<agcgainselector radio=\\\"radioState\\\"></agcgainselector>\\r\\n\\r\\n\t\t<spectrum radio=\\\"radioState\\\"> </spectrum>\\r\\n\\r\\n\\r\\n\t\t<modeselector radio=\\\"radioState\\\" mode=\\\"modes\\\"></modeselector>\\r\\n\\r\\n\t\t<agcselector radio=\\\"radioState\\\" agcmode=\\\"agcmode\\\"></agcselector>\\r\\n\\r\\n\t\t<bandwithselector radio=\\\"radioState\\\"></bandwithselector>\\r\\n\\r\\n\t\t<volume radio=\\\"radioState\\\"></volume>\\r\\n\\r\\n<br><br><br><br>\\r\\n\t\t<p>the widgets as shown will be described...i have to think about styling.. </p>\\r\\n\t\\r\\n\t\t<p> widgets to come:\\r\\n\t\t\t</p><li>filters</li>\\r\\n\t\t\t<li>volume</li>\\r\\n\t\t\t<li>nr</li>\\r\\n\t\t\t<li>anf</li>\\r\\n\t\t\t<li> nb </li>\t\\r\\n\t\t\t<li> spectrum </li>\\r\\n\t\t\t<li> waterfall </li>\\r\\n\t\t\t<li> and many more...</li>\\r\\n\\r\\n\t\t<p></p>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\t\t\\r\\n\\r\\n\");\n$templateCache.put(\"app/ssb/ssb.html\",\"\\r\\n<a href=\\\"home\\\">Home</a>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<h1>{{ $ctrl.hello }}</h1>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\");\n$templateCache.put(\"app/widgets/agc-gain-selector_view.html\",\"<input type=\\\"range\\\" min=\\\"0\\\" max=\\\"120\\\" step=\\\"1\\\" class=\\\"vranger\\\" ng-model=\\\"value\\\" ng-change=\\\"$ctrl.selectAGCGain(value)\\\">AGC Gain\\r\\n\\r\\n<style>\\r\\n.vranger {\\r\\n  margin-top: 50px;\\r\\n   transform: rotate(270deg);\\r\\n  -moz-transform: rotate(270deg); /*do same for other browsers if required*/\\r\\n}\\r\\n</style>\\r\\n\\r\\n\");\n$templateCache.put(\"app/widgets/agc-selector_view.html\",\"   <div> \\r\\n        <select name=\\\"agcmode\\\" ng-model=\\\"$ctrl.selectedMode\\\" ng-change=\\\"$ctrl.setAGCMode()\\\" ng-options=\\\"agcmode.mode for agcmode in $ctrl.agcmode track by agcmode.code\\\">\\r\\n        </select>\\r\\n    </div>\");\n$templateCache.put(\"app/widgets/att-selector_view.html\",\"<input type=\\\"range\\\" min=\\\"0\\\" max=\\\"31\\\" step=\\\"1\\\" ng-model=\\\"value\\\" ng-change=\\\"$ctrl.setAtt(value)\\\"><label>ATT</label>\\r\\n\\r\\n\\r\\n\\r\\n\");\n$templateCache.put(\"app/widgets/band-selector_view.html\",\"\\r\\n\\r\\n<button ng-click=\\\"$ctrl.selectBand(160)\\\">160m</button>\\r\\n<button ng-click=\\\"$ctrl.selectBand(80)\\\">80m</button>\\r\\n<button ng-click=\\\"$ctrl.selectBand(40)\\\">40m</button>\\r\\n<button ng-click=\\\"$ctrl.selectBand(20)\\\">20m</button>\\r\\n<button ng-click=\\\"$ctrl.selectBand(10)\\\">10m</button>\\r\\n\");\n$templateCache.put(\"app/widgets/bandwidth-selector_view.html\",\"<input type=\\\"range\\\" min=\\\"150\\\" max=\\\"5150\\\" step=\\\"1\\\" ng-model=\\\"value\\\" ng-change=\\\"$ctrl.setBandWidth(value)\\\"><label>Bandwidth</label>\");\n$templateCache.put(\"app/widgets/frequency-control_view.html\",\"<!--style=\\\"display:none\\\" beide componenten eventueel niet laten zien-->\\r\\n<div>\\r\\n\t<input id=\\\"freq\\\" type=\\\"number\\\" step=\\\"1000\\\" ng-min=\\\"1000\\\" ng-max=\\\"60000000\\\" ng-model=\\\"$ctrl.radio.frequency\\\" ng-change=\\\"$ctrl.setFreq()\\\">Frequency\\r\\n\t<div id=\\\"freqstep\\\"> <select name=\\\"Frequency Step\\\" ng-model=\\\"$ctrl.radio.frequencystep\\\">\\r\\n\t\t\t\t\t<option value=\\\"1\\\">1 Hz</option>\\r\\n\t\t\t\t\t<option value=\\\"10\\\">10 Hz</option>\\r\\n\t\t\t\t\t<option value=\\\"100\\\">100 Hz</option>\\r\\n\t\t\t\t\t<option value=\\\"1000\\\">1 KHz</option>\\r\\n\t\t\t\t\t<option value=\\\"10000\\\">10 KHz</option>\\r\\n\t\t\t\t\t<option value=\\\"100000\\\">100 KHz</option>\\r\\n\t\t\t\t\t<option value=\\\"1000000\\\">1 MHz</option>\\r\\n\t\t\t\t\t<option value=\\\"10000000\\\">10 MHz</option>\\r\\n\t</select> </div>\\r\\n\t\\r\\n</div>\");\n$templateCache.put(\"app/widgets/mode-selector_view.html\",\"    <div>\\r\\n        <select name=\\\"radiomode\\\" ng-model=\\\"$ctrl.selectedMode\\\" ng-change=\\\"$ctrl.setMode()\\\" ng-options=\\\"mod.mode for mod in $ctrl.mode track by mod.code\\\">\\r\\n        </select>\\r\\n    </div>\");\n$templateCache.put(\"app/widgets/s-meter_view.html\",\"\");\n$templateCache.put(\"app/widgets/spectrum_view.html\",\"<canvas id=\\\"visualizer\\\"></canvas>\");\n$templateCache.put(\"app/widgets/volume_view.html\",\"<input type=\\\"range\\\" min=\\\"0\\\" max=\\\"100\\\" step=\\\"1\\\" ng-model=\\\"value\\\" ng-change=\\\"$ctrl.setVolume(value)\\\"><label>Volume</label>\");}]);\nangular\r\n  .module('app')\r\n  .config(routesConfig);\r\n\r\n/** @ngInject */\r\nfunction routesConfig($stateProvider, $urlRouterProvider, $locationProvider) {\r\n  $locationProvider.html5Mode(true).hashPrefix('!');\r\n  $urlRouterProvider.otherwise('/');\r\n\r\n  $stateProvider\r\n    .state('home', {\r\n      url: '/',\r\n      component: 'home'\r\n    })\r\n\t.state('ssb', {\r\n      url: '/ssb',\r\n      component: 'ssb'\r\n    })\r\n\t.state('am', {\r\n      url: '/am',\r\n      component: 'am'\r\n    })\r\n\t.state('cw', {\r\n      url: '/cw',\r\n      component: 'cw'\r\n    })\r\n    .state('demo', {\r\n      url: '/demo',\r\n      templateUrl: 'app/demo/demo.html',\r\n      controller: 'RadioControl'\r\n    });\r\n}\r\n"]}